- @layout = "matrix"

#title
  %h1 Matrix Test

#game_container
  %canvas#gameCanvas{:width => 640, :height => 480}
    %p
      HTML5 canvas not supported by your browser.
      = link "Learn more here", "http://www.google.com/chrome"

:javascript

  /**
   * Creates a Sprite from an Image object.
   *
   * If called with just the image argument creates one sprite for the entire
   * image.
   *
   * Optional sourceX, sourceY arguments set where to start the sprite in the
   * image, default is 0,0
   *
   * Optional width, height set how big the sprite shoud be,
   * default is image.width, image.height
   */
  function Sprite(image, sourceX, sourceY, width, height) {
    sourceX = sourceX || 0;
    sourceY = sourceY || 0;
    width = width || image.width;
    height = height || image.height;

    return {
      // Draws the sprite centered at x, y
      draw: function(canvas, x, y) {
        canvas.drawImage(image,
          sourceX,
          sourceY,
          width,
          height,
          (x || 0) - width / 2,
          (y || 0) - height / 2,
          width,
          height
        );
      }
    };
  };

  function SpriteProxy() {
    return {
      draw: $.noop
    };
  }

  Sprite.load = function(url) {
    var img = new Image();
    var proxy = SpriteProxy();

    img.onload = function() {
      var sprite = Sprite(this);

      $.extend(proxy, sprite);
    };

    img.src = url;

    return proxy;
  };

  var transform = Matrix();

  var canvas = $('#gameCanvas').get(0).getContext('2d');

  $.extend(canvas, {
    withTransform: function(matrix, block) {
      this.save();

      this.transform(
        matrix.a,
        matrix.b,
        matrix.c,
        matrix.d,
        matrix.tx,
        matrix.ty
      );

      try {
        block();
      } finally {
        this.restore();
      }
    },

    fill: function(color) {
      this.fillStyle = color;
      this.fillRect(0, 0, 640, 480);
    }
  });

  function GameObject(imageUrl, transform, components) {
    var transform = transform || Matrix.IDENTITY;

    var self = {
      components: components || [],
      draw: function() {
        canvas.withTransform(self.transform(), function() {
          self.sprite.draw(canvas);

          $.each(self.components, function(i, component) {
            component.draw(canvas);
          });
        });
      },
      transform: function(newTransform) {
        if(newTransform !== undefined) {
          transform = newTransform;
          return self;
        } else {
          return transform;
        }
      },

      // Rotate about the midpoint
      rotate: function(theta) {
        transform = transform.rotate(theta, Point(transform.tx, transform.ty));
      },

      // Move
      translate: function(tx, ty) {
        transform = transform.translate(tx, ty);
      },

      sprite: Sprite.load(imageUrl)
    };

    return self;
  }

  var hat = GameObject("images/accessories/tophat.png", Matrix.translation(30, -32));

  var dino = GameObject("images/levels/dino1.png", Matrix.translation(320, 240), [
    hat
  ]);

  setInterval(function() {
    canvas.fill('#A2EEFF');

    dino.draw(canvas);

  }, 33);
