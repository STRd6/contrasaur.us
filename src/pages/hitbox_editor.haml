#title
  %h1 Hitbox Editor

#game_container
  #game_info
    %span#health_label health
    #progress_bar
      #health
    #score_holder
      %span#score_label score
      %span#score 0
  %canvas#gameCanvas{:width => 640, :height => 480}
    %p
      HTML5 canvas not supported by your browser.
      = link "Learn more here", "http://www.google.com/chrome"

%input{:class => 'ui', :id => 'increase', :type => 'button', :value => 'increase'}
%input{:class => 'ui', :id => 'decrease', :type => 'button', :value => 'decrease'}
%input{:class => 'ui', :id => 'left', :type => 'button', :value => 'left'}
%input{:class => 'ui', :id => 'right', :type => 'button', :value => 'right'}
%input{:class => 'ui', :id => 'up', :type => 'button', :value => 'up'}
%input{:class => 'ui', :id => 'down', :type => 'button', :value => 'down'}

:javascript
  var transform = Matrix.translation(320, 240);
  var activeCircle;
  var activeColor = "rgba(255, 0, 255, 0.5)";
  var circleColor = "rgba(255, 0, 0, 0.5)";
  var circles = [{"x":84,"y":124,"radius":13}, {"x":50,"y":70,"radius":13}];

  $('#gameCanvas').powerCanvas({init: function(canvas) {
    var I = {
      sprite: Sprite.load("images/enemies/parasoldier.png")
    };

    var character = GameObject(I).extend({
      setCircles: function(newCircles) {
        circles = newCircles;
      },

      getCircles: function() {
        var transform = this.getTransform();

        return $.map(circles, function(circle) {
          var point = transform.transformPoint(circle);
          return {
            x: point.x,
            y: point.y,
            radius: circle.radius,
            circle: circle
          };
        });
      },

      getTransform: function() {
        return transform;
      },

      draw: function(canvas) {
        canvas.withTransform(this.getTransform(), function() {
          I.sprite.draw(canvas,
            -I.sprite.width / 2,
            -I.sprite.height / 2
          );
        });

        $.each(this.getCircles(), function(i, circle) {
          var color = (circle.circle == activeCircle ? activeColor : circleColor);
          canvas.fillCircle(circle.x, circle.y, circle.radius, color);
        });
      }
    });

    setInterval(function() {
      canvas.fill('#000');
      character.draw(canvas);
    }, 33);

    canvas.click(function(e) {
      var point = {
        x: event.offsetX,
        y: event.offsetY
      };

      console.log(point);

      var set = false;

      // Check which circle was hit
      $.each(character.getCircles(), function(i, circle) {
        if(set) {
          return;
        }

        console.log(circle);
        var dx = point.x - circle.x;
        var dy = point.y - circle.y;
        var dist = circle.radius;

        console.log(dx);
        console.log(dy);
        console.log(dist);

        if(dx * dx + dy * dy < dist * dist) {
          activeCircle = circle.circle;
          set = true;
        }

        console.log(activeCircle);
      });

      if(!set) {
        activeCircle = undefined;
      }
    });

  }});

  function move(x, y) {
    if(activeCircle) {
      activeCircle.x += x;
      activeCircle.y += y;
    }
  }

  function grow(delta) {
    if(activeCircle) {
      activeCircle.radius = Math.clamp(delta + activeCircle.radius, 1, 1000);
    }
  }

  keyEvents = {
    "left": function() {
      move(-1, 0);
    },
    "right": function() {
      move(1, 0);
    },
    "up": function() {
      move(0, -1);
    },
    "down": function() {
      move(0, 1);
    },
    "+": function() {
      grow(1);
    },
    "-": function() {
      grow(-1);
    },
    "shift+left": function() {
      move(-10, 0);
    },
    "shift+right": function() {
      move(10, 0);
    },
    "shift+up": function() {
      move(0, -10);
    },
    "shift+down": function() {
      move(0, 10);
    },
    "shift++": function() {
      grow(10);
    },
    "shift+-": function() {
      grow(-10);
    },
  }

  $.each(keyEvents, function(key, fn) {
    $(document).bind('keydown', key, fn);
  });

  $('.ui').bind('click', function() {
    if ($(this).attr('value') === 'increase') {
      grow(1);
    }
    if ($(this).attr('value') === 'decrease') {
      grow(-1);
    }
    if ($(this).attr('value') === 'up') {
      move(0,-1);
    }
    if ($(this).attr('value') === 'down') {
      move(0,1);
    }
    if ($(this).attr('value') === 'left') {
      move(-1,0);
    }
    if ($(this).attr('value') === 'right') {
      move(1,0);
    }
  });