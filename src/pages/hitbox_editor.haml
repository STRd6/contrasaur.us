#title
  %h1 Hitbox Editor

#game_container
  #game_info
    %span#health_label health
    #progress_bar
      #health
    #score_holder
      %span#score_label score
      %span#score 0
  %canvas#gameCanvas{:width => 640, :height => 480}
    %p
      HTML5 canvas not supported by your browser.
      = link "Learn more here", "http://www.google.com/chrome"

#controls
  %input.ui{:type => 'button', :value => 'increase'}
  %input.ui{:type => 'button', :value => 'decrease'}
  %input.ui{:type => 'button', :value => 'increase+'}
  %input.ui{:type => 'button', :value => 'decrease-'}

= text_field "animationDataUrl", "javascripts/data/sandinista/run.animation.json"
%button#loadImage Load Animation
= "|"
= text_field "modelDataUrl", "javascripts/data/sandinista/run.animation.json"
%button#loadModel Load Model
= "|"
%button#export Export


:javascript
  var transform = Matrix.translation(320, 240);
  var animation;
  var animationJSON;
  var currentFrame = 0;
  var activeCircle;
  var activeColor = "rgba(255, 0, 255, 0.5)";
  var circleColor = "rgba(255, 0, 0, 0.5)";
  var frameCircles;

  $('#gameCanvas').powerCanvas({init: function(canvas) {
    var character = GameObject().extend({
      getCircles: function() {
        var transform = this.getTransform();

        if(frameCircles) {
          return $.map(frameCircles[currentFrame], function(circle) {
            var point = transform.transformPoint(circle);
            return {
              x: point.x,
              y: point.y,
              radius: circle.radius,
              circle: circle
            };
          });
        } else {
          return [];
        }
      },

      getTransform: function() {
        return transform;
      },

      draw: function(canvas) {
        if(animation) {
          animation.frame(currentFrame);

          canvas.withTransform(this.getTransform(), function() {
            animation.draw(canvas,
              -animation.width / 2,
              -animation.height / 2
            );
          });
        }

        $.each(this.getCircles(), function(i, circle) {
          var color = (circle.circle == activeCircle ? activeColor : circleColor);
          canvas.fillCircle(circle.x, circle.y, circle.radius, color);
        });
      }
    });

    setInterval(function() {
      canvas.fill('#000');
      character.draw(canvas);
    }, 33);

    canvas.click(function(e) {
      var point = {
        x: event.offsetX,
        y: event.offsetY
      };

      var set = false;

      // Check which circle was hit
      $.each(character.getCircles(), function(i, circle) {
        if(set) {
          return;
        }

        var dx = point.x - circle.x;
        var dy = point.y - circle.y;
        var dist = circle.radius;

        if(dx * dx + dy * dy < dist * dist) {
          activeCircle = circle.circle;
          set = true;
        }

      });

      if(!set) {
        activeCircle = undefined;
      }
    });

  }});

  function nextFrame() {
    activeCircle = undefined;
    currentFrame++;

    if(currentFrame == animation.frameCount()) {
      currentFrame = 0;
    } else if(currentFrame >= frameCircles.length) {
      // Copy first frame of hit circles
      var copy = frameCircles[0].slice(0).map(function(circle) {
        return {
          x: circle.x,
          y: circle.y,
          radius: circle.radius
        };
      });

      frameCircles.push(copy);
    }
  }

  function previousFrame() {
    if(currentFrame > 0) {
      currentFrame--;
    }
  }

  function addCircle() {
    activeCircle = {
      x: 0,
      y: 0,
      radius: 50
    };
    frameCircles[currentFrame].push(activeCircle);
  }

  function removeCircle() {
    frameCircles[currentFrame].remove(activeCircle);
  }

  function nextCircle() {
    var index = frameCircles[currentFrame].indexOf(activeCircle);
    console.log(index);
    index = Math.mod((index - 1), frameCircles[currentFrame].length);
    console.log(index);
    activeCircle = frameCircles[currentFrame][index];
  }

  function nextCircle() {
    var index = frameCircles[currentFrame].indexOf(activeCircle);
    console.log(index);
    index = (index + 1) % frameCircles[currentFrame].length;
    console.log(index);
    activeCircle = frameCircles[currentFrame][index];
  }

  function move(x, y) {
    if(activeCircle) {
      activeCircle.x += x;
      activeCircle.y += y;
    }
  }

  function grow(delta) {
    if(activeCircle) {
      activeCircle.radius = Math.clamp(delta + activeCircle.radius, 1, 1000);
    }
  }

  keyEvents = {
    "+": function() {
      grow(1);
    },
    "-": function() {
      grow(-1);
    },
    "up": function() {
      move(0, -1);
    },
    "down": function() {
      move(0, 1);
    },
    "left": function() {
      move(-1, 0);
    },
    "right": function() {
      move(1, 0);
    },
    "shift+left": function() {
      move(-10, 0);
    },
    "shift+right": function() {
      move(10, 0);
    },
    "shift+up": function() {
      move(0, -10);
    },
    "shift+down": function() {
      move(0, 10);
    },
    "shift++": function() {
      grow(10);
    },
    "shift+-": function() {
      grow(-10);
    },
    "shift+tab": function() {
      prevCircle();
      return false;
    },
    "tab": function() {
      nextCircle();
      return false;
    },
    "d": function() {
      removeCircle();
    }
  }

  $.each(keyEvents, function(key, fn) {
    $(document).bind('keydown', key, fn);
  });

  $('.ui').bind('click', function() {
    if ($(this).attr('value') === 'increase') {
      grow(1);
    }
    if ($(this).attr('value') === 'decrease') {
      grow(-1);
    }
    if ($(this).attr('value') === 'increase+') {
      grow(5);
    }
    if ($(this).attr('value') === 'decrease-') {
      grow(-5);
    }
  });

  $("<input type='button' value='Add Circle'/>").click(function() {
    addCircle();
  }).appendTo($("#controls"));

  $("<input type='button' value='Remove Circle' />").click(function() {
    removeCircle();
  }).appendTo($("#controls"));

  $("<input type='button' value='Previous Frame' />").click(function() {
    previousFrame();
  }).appendTo($("#controls"));

  $("<input type='button' value='Next Frame'/>").click(function() {
    nextFrame();
  }).appendTo($("#controls"));

  function loadAnimationJSON(url) {
    Animation.loadJSONUrl(url, function(a, data) {
      animation = a;
      currentFrame = a.frame();
      animationJSON = data;
      frameCircles = [[]];
    });
  };

  function loadModel(url) {
    Model.loadJSONUrl(url, function(model, animData) {
      frameCircles = model.hitFrames;
      animation = model.animation;
      animationJSON = animData;
    });
  }

  $("#loadImage").click(function() {
    loadAnimationJSON($(this).prev().val());
  });

  $("#loadModel").click(function() {
    loadModel($(this).prev().val());
  }).click();

  $("#export").click(function() {
    alert(JSON.stringify({
      animation: animationJSON,
      hitFrames: frameCircles
    }, null, 2));
  });
